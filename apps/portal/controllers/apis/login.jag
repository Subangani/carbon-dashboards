<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var user;
(function () {
    var log = new Log();
    var configs = require("/configs/portal.js").config();
    var tokenUtil = require("/modules/tokenUtil.js").tokenUtil;
    var constants = require("/modules/constants.js");
    var dashboards = require("/modules/dashboards.js");
    var permission = require("/modules/permission.js");
    var conf = require("/modules/config.js").getConfigFile();
    var i18n = require("i18n");
    var UUID = "";
    i18n.init(request, utils.getLocaleResourcePath());

    /**
     * Sanitize the input value.
     * @param destination {String}
     * @return string
     * @private
     */
    var sanitizeDestination = function (destination) {
        if (!destination) {
            return "";
        }
        return destination.replace(/[^a-zA-Z0-9-_/?&=. ]/g, "");
    };
    if (request.getMethod() === "POST") {
        var dest = sanitizeDestination(request.getParameter("destination"));
        if (dest) {
            // Check whether the dest. URL starts with either http:// or https://. If so remove the authority and get
            // the rest of the URL.
            if (/^https?:\/\//i.test(dest)) {
                var url = new Packages.java.net.URL(dest),
                        authority = url.getAuthority();
                dest = dest.substring(dest.indexOf(authority) + authority.length());
            }
            // Check whether the dest. URL starts with '/'. If not prepend the '/'.
            if (!/^\//i.test(dest)) {
                dest = "/" + dest;
            }
            // Check whether the dest. URL starts with '/portal'. if not set the url to '/portal'.
            if (!/^\/portal/i.test(dest)) {
                dest = "/portal/";
            }
        }
        var username = request.getParameter("username");
        var password = request.getParameter("password");
        var usr = require("/modules/user.js");
        var api = require("/modules/api.js");
        var carbon = require("carbon");
        user = carbon.server.tenantUser(username);
        if (user.tenantId !== -1) {
            if (usr.login(username, password)) {
                if (!permission.isAllowed(constants.LOGIN)) {
                    // If user do not have necessary permissions, display an error message and logout the user
                    message = "login.unauthorized.messages";
                    usr.logout();
                    response.sendRedirect(dest + "login?loginAttempt=true");
                    return;
                }
                session.put("Loged", "true");

                var ApiUrl = 'https://localhost:9443/notification/services/notifications/notificationApi/notifications/login'+'?tenantId=' + user.tenantId;
                var code = username+ ":" + password;
                var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

                var encoded = Base64.encode(code);
                //log.info(encoded + "   encodsdsded");
                var xhr = new XMLHttpRequest();
                xhr.open("POST", ApiUrl);
                xhr.setRequestHeader("encoded", encoded);
                xhr.send();

                UUID = xhr.responseText;
                session.put("uuid", UUID);

                var authToken = api.authenticate(username, password);
                var properties = {username: username, password: password};
                var idPServer = tokenUtil.getIdPServerURL();
                if (tokenUtil.checkOAuthEnabled() && idPServer) {
                    tokenUtil.setupAccessTokenPair(constants.GRANT_TYPE_PASSWORD, properties, idPServer, function (status) {
                        if (!status) {
                            log.error("Error while setting up access token and refresh token");
                        }
                    });
                }
                session.put("authToken", authToken);
                if (log.isDebugEnabled()) {
                    log.debug(session.get("user") + " is authorized.");
                }
                if (dest) {
                    if ((dest.indexOf(conf.tenantPrefix + "/" + user.domain) > -1) || (dest.indexOf(conf.tenantPrefix +
                                     + "/") < 0
                            && superDomain === String(user.domain))) {
                        response.sendRedirect(dest);
                    } else {
                        response.sendRedirect("/" + constants.APP_NAME + "/");
                    }
                }
                var content = {"sessionId": session.getId()};
                response.status = 200;
                response.contentType = "application/json";
                response.content = content;
            }
            else {
                if (dest) {
                    response.sendRedirect("/" + constants.APP_NAME + "/login?loginAttempt=true&destination=" + dest);
                }
            }
        }
        else {
            if (dest) {
                response.sendRedirect("/" + constants.APP_NAME + "/login?loginAttempt=true&destination=" + dest);
            }
        }
    } else if ( request.getMethod() === "GET" ){
        log.info(UUID);
        print(session.get("uuid"));
    } else {
        response.sendError(403, i18n.localize("forbidden"));
    }
}()); %>
